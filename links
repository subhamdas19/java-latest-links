https://howtodoinjava.com/java/collections/hashmap/how-hashmap-works-in-java/

concurrent hashmap
https://www.geeksforgeeks.org/concurrenthashmap-in-java/


hashtable
https://www.geeksforgeeks.org/hashtable-in-java/

equals and hashcode 
https://www.geeksforgeeks.org/equals-hashcode-methods-java/

Why to Override equals(Object) and hashCode() method ?
https://www.geeksforgeeks.org/override-equalsobject-hashcode-method/


strings
https://www.geeksforgeeks.org/strings-in-java/
https://www.journaldev.com/797/what-is-java-string-pool
https://www.geeksforgeeks.org/interning-of-string/


why strings immutable?
https://www.baeldung.com/java-string-immutable


These are some more reasons of making String immutable:

    The String pool cannot be possible if String is not immutable in Java. A lot of heap space is saved by JRE. The same string variable can be referred to by more than one string variable in the pool. String interning can also not be possible if the String would not be immutable.
    If we don't make the String immutable, it will pose a serious security threat to the application. For example, database usernames, passwords are passed as strings to receive database connections. The socket programming host and port descriptions are also passed as strings. The String is immutable, so its value cannot be changed. If the String doesn't remain immutable, any hacker can cause a security issue in the application by changing the reference value.
    The String is safe for multithreading because of its immutableness. Different threads can access a single "String instance". It removes the synchronization for thread safety because we make strings thread-safe implicitly.
    Immutability gives the security of loading the correct class by Classloader. For example, suppose we have an instance where we try to load java.sql.Connection class but the changes in the referenced value to the myhacked.Connection class does unwanted things to our database.

https://dzone.com/articles/how-to-create-an-immutable-class-in-java


https://www.geeksforgeeks.org/multithreading-in-java/

https://www.geeksforgeeks.org/thread-pools-java/

PRIORITY QUEUE COMPARATOR
https://www.geeksforgeeks.org/implement-priorityqueue-comparator-java/

MAX HEAP DECLARATION
 PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
  PriorityQueue<Integer> minHeap = new PriorityQueue<>();
  
  
  
  https://stackoverflow.com/questions/11003155/change-priorityqueue-to-max-priorityqueue
  
  
https://www.geeksforgeeks.org/comparable-vs-comparator-in-java/

    Comparable is meant for objects with natural ordering which means the object itself must know how it is to be ordered. For example Roll Numbers of students. Whereas, Comparator interface sorting is done through a separate class.
    Logically, Comparable interface compares “this” reference with the object specified and Comparator in Java compares two different class objects provided.
    If any class implements Comparable interface in Java then collection of that object either List or Array can be sorted automatically by using Collections.sort() or Arrays.sort() method and objects will be sorted based on there natural order defined by CompareTo method.
    A basic differentiating feature is that using comparable we can use only one comparison. Whereas, we can write more than one custom comparators as you want for a given type, all using different interpretations of what sorting means. Like in the comparable example we could just sort by only one attribute, i.e., year but in the comparator, we were able to use different attributes like rating, name, and year as well.
    
    IMPLEMENTATION OF HASHSET
    https://www.geeksforgeeks.org/hashset-in-java/
    
    
    final
    https://www.geeksforgeeks.org/final-keyword-java/
    
    Collections
https://www.geeksforgeeks.org/difference-between-hashmap-and-hashset/
https://www.geeksforgeeks.org/differences-between-hashmap-and-hashtable-in-java/
https://www.javatpoint.com/linkedhashmap-vs-hashmap-in-java
https://www.geeksforgeeks.org/differences-treemap-hashmap-linkedhashmap-java/
When to use an ArrayList, Vector, LinkedList?
https://www.w3spoint.com/arraylist-linkedlist-vector-java
https://medium.com/zero-equals-false/arraylist-vs-linkedlist-vs-vector-22e1721a66b0

When to use ArrayList over a HashSet or vice-versa?
https://www.geeksforgeeks.org/difference-between-arraylist-and-hashset-in-java/

wait():
When you call wait method on the object then it tell threads to give up the lock and go to sleep state unless and until some other thread enters in same monitor and calls notify or notifyAll methods on it.
notify():
When you call notify method on the object, it wakes one of thread waiting for that object. So if multiple threads are waiting for an object, it will wake of one of them. Now you must be wondering which one it will wake up. It actually depends on OS implementation.
notifyAll() :
notifyAll will wake up all threads waiting on that object unlike notify which wakes up only one of them.Which one will wake up first depends on thread priority and OS implementation.

https://java2blog.com/print-sequence-3-threads-java/
Print sequence using 3 threads in java

Print even and odd numbers in increasing order using two threads in Java
https://www.geeksforgeeks.org/print-even-and-odd-numbers-in-increasing-order-using-two-threads-in-java/

join
https://beginnersbook.com/2015/03/thread-join-method-in-java-with-example/

singleton class in java
https://www.geeksforgeeks.org/singleton-class-java/
https://www.geeksforgeeks.org/singleton-design-pattern/

Logger : Singleton classes are used in log file generations. Log files are created by the logger class object. Suppose an application where the logging utility has to produce one log file based on the messages received from the users. If there is multiple client application using this logging utility class they might create multiple instances of this class and it can potentially cause issues during concurrent access to the same logger file. We can use the logger utility class as a singleton and provide a global point of reference so that each user can use this utility and no 2 users access it at the same time.

https://www.geeksforgeeks.org/top-20-java-multithreading-interview-questions-answers/?ref=rp

https://www.geeksforgeeks.org/synchronized-in-java/

https://www.geeksforgeeks.org/method-block-synchronization-java/
https://www.tutorialspoint.com/difference-between-object-level-lock-and-class-level-lock-in-java
https://www.geeksforgeeks.org/class-level-lock-in-java/
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/
https://www.geeksforgeeks.org/garbage-collection-java/

https://www.youtube.com/watch?v=akFRa58Svug&t=608s
https://www.infoworld.com/article/2075692/avoid-synchronization-deadlocks.html

https://mkyong.com/java/java-executorservice-examples/
https://www.geeksforgeeks.org/java-util-concurrent-package/

